class Platform
types
	public DelegationSet = set of Delegation;
	
values
-- TODO Define values here
instance variables

operations
	public static main() == (
		dcl delegations: DelegationSet := {};
		
		dcl u1 : User := new User("Claudia");
		dcl u2 : User := new User("Margarida");
		dcl u3 : User := new User("Bruno");
		dcl u4 : User := new User("Duarte");
		
		dcl d1 : Delegation := new Delegation("Delegation1", "Porto", 2);
		dcl d2 : Delegation := new Delegation("Delegation2", "Lisboa", 20);
		
		dcl p1 : Product := new Product("Morango");
		dcl p2 : Product := new Product("Batata doce");
		dcl p3 : Product := new Product("Tomate");
		dcl p4 : Product := new Product("Pepino");
		dcl p5 : Product := new Product("Couve");
		dcl p6 : Product := new Product("Rabanete");
		dcl p7 : Product := new Product("Ameixa");
		dcl p8 : Product := new Product("Ananas");
		
		dcl p9 : Product := new Product("Laranja");
		dcl p10 : Product := new Product("Beringela");
		dcl p11 : Product := new Product("Castanha");
		dcl p12 : Product := new Product("Ervilhas");
		dcl p13 : Product := new Product("Salsa");
		dcl p14 : Product := new Product("Grelos");
		dcl p15 : Product := new Product("Toranja");
		dcl p16 : Product := new Product("Melao");
		
				
		dcl producer1 : Producer := new Producer("Diana");
		dcl producer2 : Producer := new Producer("Carvalhais");
		dcl producer3 : Producer := new Producer("Hugo");
		dcl producer4 : Producer := new Producer("Miguel");
		
		producer1.addProduct(p1, 10.0);
		producer1.addProduct(p1, 8.0);
		producer1.addProduct(p2, 5.0);
		
		producer2.addProduct(p2, 10.0);
		producer2.addProduct(p3, 20.0);
		producer2.addProduct(p4, 10.0);
		producer2.addProduct(p5, 15.0);
		producer2.addProduct(p6, 13.0);
		producer3.addProduct(p7, 3.0);
		producer3.addProduct(p8, 6.0);
		
		producer4.addProduct(p9, 10.0);
		producer4.addProduct(p10, 15.0);
		producer4.addProduct(p11, 13.0);
		producer4.addProduct(p12, 12.0);
		producer4.addProduct(p13, 11.0);
	
		
		d1.registerProducer(producer1);
		d1.registerProducer(producer2);
		d1.registerProducer(producer3);
		-- d2.registerProducer(producer4);

		IO`println("");	
				
		delegations := delegations union {d1};
		delegations := delegations union {d2};
		
		d1.registerUser(u1, <large>);
		d1.registerUser(u2, <large>);
		d2.registerUser(u3, <large>);
		d2.registerProducer(producer4);
		
		producer4.addProduct(p14, 9.0);
		producer4.addProduct(p15, 8.0);
		producer4.addProduct(p16, 20.0);
		
		IO`print("\nUsers in Delegation1: ");
		IO`println(card d1.users);
		
		IO`print("Pending users in Delegation1: ");
		IO`println(card d1.pendingUsers);
		
		IO`print("Users in Delegation2: ");
		IO`println(card d2.users);
		
		IO`print("Pending users in Delegation2: ");
		IO`println(d2.pendingUsers);
		
		IO`println("\nTesting delegation change from delegation1 to delegation2...");		
		u1.delegationChange(d2, <small>);
		
		IO`print(card d1.users);
		IO`println(" users on delegation 1.");
		IO`print(card d2.users);
		IO`println(" users on delegation 2.");
		
		IO`println("Finished testing delegation change.\n");
		
		IO`println("Testing producer and user weights... ");
		IO`println("Producers");				
		IO`println(producer1.getWeight());
		IO`println(producer2.getWeight());
		IO`println(producer3.getWeight());
		IO`println(d1.getMaxWeight());
		IO`println("\nUsers");
		IO`println(d1.getUsersWeight());
		IO`println("Finished testing weights.\n");
		
		d1.createBaskets();		
		d2.createBaskets();
		IO`println(u1);
	);
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Platform