class Delegation
types
	public DelegationName = seq1 of char;
	public LocationName = seq1 of char;
	public UserSet = set of User;
	public Weight = nat1;
	public ProductSet = map Product to Weight;
	public ProducerSet = set of Producer;
	public UserBaskets = map User to Basket;
	
values
-- TODO Define values here

instance variables
	public name: DelegationName;
	public userCapacity: nat1;
	public location: LocationName;
	public users: UserSet := {};
	public producers: ProducerSet := {};
	public products: ProductSet := { |-> };
	public pendingUsers: UserSet := {};
	public userBaskets: UserBaskets := { |-> };
	inv getUsersWeight() <= getMaxWeight();				-- a capacidade de utilizadores registados na delegacao nunca pode ser excedida
	
operations

	public Delegation : DelegationName*LocationName*nat1 ==> Delegation
		Delegation(nm,ln,uc)==(
			name := nm;
			location := ln;
			userCapacity := uc;
			return self;
		)
		post name = nm and location = ln and userCapacity = uc;
	
	public registerUser : User*Basket`Size ==> ()								-- retorna verdadeiro se o registo do utilizador foi bem sucedido
		registerUser(user, basketSize)==(
			if card users >= userCapacity														-- se a capacidade de utilizadores da delegacao estiver no limite
			then (
				pendingUsers := pendingUsers union {user};
				user.removeDelegation();
			)
			else (
				users := users union {user};
				user.setBasketSize(basketSize);
				user.setDelegation(self);
			);
		)
		post card users <= userCapacity and (user in set users or user in set pendingUsers);
		
	public isUserRegistered : User ==> bool
		isUserRegistered(user)==(
			if user in set users
			then return true
			else return false;
		);
		
	public removeUser(user: User) ==
  	users := users \ {user}
  	pre users <> {} and user in set users
  	post user not in set users;

	public registerProducer (producer: Producer) == 
		producers := producers union {producer}
		pre producer not in set producers
		post producers <> {};
	
	public getProducts : () ==> ProductSet
		getProducts()==(
			for all p in set producers do (
				for all q in set dom p.products do (
					products := products munion { q |-> p.products(q)};
				);
			);
			return products;
		)
		post card dom products >= 8;
		
	public pure getMaxWeight : () ==> nat
	getMaxWeight()==
		getProducerslWeight(producers);
		
	public pure getUsersWeight : () ==> nat
	getUsersWeight()==
		getrequiredWeight(users);	
		

functions		
	public getProducerslWeight : ProducerSet -> nat
	getProducerslWeight(producers)==(
	  if producers = {} then 0
		else let p in set producers in p.getWeight() + getProducerslWeight(producers\{p} ) 
		);
			    	            	
	public getrequiredWeight : UserSet -> nat
	getrequiredWeight(users)==(
	  if users = {} then 0
		else let u in set users in 
		if u.basketSize = <small> then 4 + getrequiredWeight(users\{u})
		else 8 + getrequiredWeight(users\{u})
		);
		
traces
-- TODO Define Combinatorial Test Traces here
end Delegation