class Delegation
types
	public DelegationName = seq1 of char;
	public LocationName = seq1 of char;
	public UserSet = set of User;
	public ProducerSet = set of Producer;
	public UserBaskets = map User to Basket;
	
values
-- TODO Define values here

instance variables
	private name: DelegationName;
	private userCapacity: nat1;
	private location: LocationName;
	private users: UserSet := {};
	private producers: ProducerSet := {};
	private pendingUsers: UserSet := {};
	private userBaskets: UserBaskets := { |-> };
	inv card users <= userCapacity;							-- a capacidade de utilizadores registados na delegacao nunca pode ser excedida
	
operations

	public Delegation : DelegationName*LocationName*nat1 ==> Delegation
		Delegation(nm,ln,uc)==(
			name := nm;
			location := ln;
			userCapacity := uc;
			return self;
		)
		post name = nm and location = ln and userCapacity = uc;
	
	public registerUser : User*Basket`Size ==> ()								-- retorna verdadeiro se o registo do utilizador foi bem sucedido
		registerUser(user, basketSize)==(
			if card users >= userCapacity								-- se a capacidade de utilizadores da delegacao estiver no limite
			then (
				pendingUsers := pendingUsers union {user};
				user.removeDelegation();
			)
			else (
				users := users union {user};
				user.setBasketSize(basketSize);
				user.setDelegation(self);
			);
		)
		post card users <= userCapacity;
		
	public isUserRegistered : User ==> bool
		isUserRegistered(user)==(
			if user in set users
			then return true
			else return false;
		);
		
	public removeUser(user: User) ==
  	users := users \ {user};

	public registerProducer (producer: Producer) == 
		producers := producers union {producer};
		
	public getUsers : () ==> UserSet
		getUsers()==return users;
		
	public getPendingUsers : () ==> UserSet
		getPendingUsers()==return pendingUsers;

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Delegation