class Delegation
types
	public DelegationName = seq1 of char;
	public LocationName = seq1 of char;
	public UserSet = set of User;
	public ProducerSet = set of Producer;
	public UserBaskets = map User to Basket;
	
values
-- TODO Define values here

instance variables
	public name: DelegationName;
	public userCapacity: nat1;
	public location: LocationName;
	public users: UserSet := {};
	public producers: ProducerSet := {};
	public pendingUsers: UserSet := {};
	public userBaskets: UserBaskets := { |-> };
	inv card users <= userCapacity;							-- a capacidade de utilizadores registados na delegacao nunca pode ser excedida
	
operations

	public Delegation : DelegationName*LocationName*nat1 ==> Delegation
		Delegation(nm,ln,uc)==(
			name := nm;
			location := ln;
			userCapacity := uc;
		)
		post name = nm and location = ln and userCapacity = uc;
	
	public registerUser : User ==> bool								-- retorna verdadeiro se o registo do utilizador foi bem sucedido
		registerUser(user)==(
			if card users >= userCapacity									-- se a capacidade de utilizadores da delegacao estiver no limite
			then (
				pendingUsers := pendingUsers union {user};	-- utilizador e acrescentado a lista de espera
				return false;
			)
			else																					-- se a capacidade de utilizadores ainda nao tiver sido excedida
			(
				users := users union {user};								-- utilizador e registado com sucesso
				return true;
			)
		)
		post card users <= userCapacity;

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Delegation