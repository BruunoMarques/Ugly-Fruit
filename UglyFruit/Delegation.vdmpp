class Delegation
types
	public DelegationName = seq1 of char;
	public LocationName = seq1 of char;
	public UserSet = set of User;
	public Weight = real;
	public ProductSet = map Product to Weight;
	public ProducerSet = set of Producer;
	public UserBaskets = map User to Basket;
	
values
-- TODO Define values here

instance variables
	public name: DelegationName;
	public userCapacity: nat1;
	public location: LocationName;
	public users: UserSet := {};
	public producers: ProducerSet := {};
	public pendingUsers: UserSet := {};
	public userBaskets: UserBaskets := { |-> };
	inv getUsersWeight() <= getMaxWeight();
	inv card users <= userCapacity;
	inv card users > 0 => productsPerBasket(card users) >= 8;
	inv card users > 0 => card producers > 0;	
	
operations

	public Delegation : DelegationName*LocationName*nat1 ==> Delegation
		Delegation(nm,ln,uc)==(
			name := nm;
			location := ln;
			userCapacity := uc;
			return self;
		)
		post name = nm and location = ln and userCapacity = uc;
	
	public registerUser : User*Basket`Size ==> ()								-- retorna verdadeiro se o registo do utilizador foi bem sucedido
		registerUser(user, basketSize)==(
			dcl tmp : User := new User("tmp");
			tmp.setBasketSize(<large>);															-- verifica se a delegacao tem capacidade para satisfazer os pedidos de cestas de utilizadores
			
			if ((card users >= userCapacity) or (getrequiredWeight(users union {tmp}) > getMaxWeight()) or productsPerBasket(card users + 1) < 8)
			then (
				if user not in set pendingUsers
				then (
					user.setBasketSize(basketSize);
					pendingUsers := pendingUsers union {user};
					
					IO`print("Pending user ");
					IO`println(user.name);
				);

			)
			else (
				if(user in set pendingUsers)
				then pendingUsers := pendingUsers \ {user};
				
				user.setBasketSize(basketSize);
				user.setDelegation(self);					
				users := users union {user};
				
				IO`print("Registered user ");
				IO`print(user.name);
				IO`print(" on delegation ");
				IO`println(self.name);	
			);
		)
		pre PlatformUtils`validateUser(user) and user not in set users and card users < userCapacity
		post (user in set users or user in set pendingUsers) 
		and card users <= userCapacity 
		and getUsersWeight() <= getMaxWeight() 
		and productsPerBasket(card users) >= 8 
		and if card users > 0 then card producers > 0 else card producers >= 0;
		
	public removeUser : User ==> ()
	removeUser(user)==(
	  user.removeDelegation();
	  checkPendingUsers();
  	users := users \ {user}
  	)
  	pre users <> {} and user in set users
  	post user not in set users;

	public registerProducer : Producer ==> ()
		registerProducer(producer)==(
			producer.setDelegation(self);
			producers := producers union {producer};
			
			IO`print("Registered producer ");
			IO`print(producer.name);
			IO`print(" on delegation ");
			IO`println(self.name);
			
			checkPendingUsers();
		)
		pre producer not in set producers and PlatformUtils`validateProducer(producer)
		post producers <> {};
	
	public pure getProducts : () ==> ProductSet
		getProducts()==(
			dcl P : ProductSet := { |-> };
			for all producer in set producers do (
				for all product in set dom producer.products do (
					if product in set dom P
					then P(product) := P(product) + producer.products(product)
					else P := P munion { product |-> producer.products(product)};
				);
			);
			return P;
		);
		
	public createBaskets : () ==> ()
		createBaskets()==(
			for all user in set users do (
				dcl bsk : Basket := new Basket(user.basketSize);
				dcl minWeight : real := 0;
				dcl maxWeight : real := 0;
				dcl variety : real := 0;
				
				if (user.basketSize = <small>)
				then (minWeight := 3; maxWeight := 4; variety := 7)
				else (minWeight := 6; maxWeight := 8; variety := 8);
				
				if user.cancelBasket = false
				then createBasketsAux(user, bsk, minWeight, maxWeight, variety)
				else user.setCancelBasket(false);
			);
			IO`print("RESTOCKING WAREHOUSE ON ");
			IO`println(self.name);
			IO`println("");
			restock();
		)
		pre users <> {} and producers <> {} and getUsersWeight() <= getMaxWeight() and productsPerBasket(card users) >= 8
		post userBaskets <> { |-> };
		
public createBasketsAux : User*Basket*real*real*real ==> ()
			createBasketsAux(user, bsk, minWeight, maxWeight, variety)==(
				dcl v : real := 0;
				dcl variedProducts : set of Product := {};
				dcl varietyAchieved : bool := false;

				while(bsk.weight < minWeight) do (
					for all producer in set producers do (
						for all product in set dom producer.products do (
							dcl w : real := 0.5;
							dcl deletedWeight : real := 0;
	
							deletedWeight := producer.removeStock(product, w);
							if (deletedWeight > 0)
							then (								
								if (product not in set variedProducts and v < variety)
								then (
									variedProducts := variedProducts union {product};
									v := v + 1;
								);
								
								if(product in set variedProducts)
								then (bsk.addProduct(product, deletedWeight));
								
								if(v >= variety)
								then (varietyAchieved := true;);
								
								if(bsk.weight >= minWeight and bsk.weight <= maxWeight and varietyAchieved = true)
								then (

									if (user in set dom userBaskets)
									then userBaskets(user) := bsk
									else userBaskets := userBaskets munion {user |-> bsk};
									
									if user.basketSize = <small>
									then IO`print("Small ")
									else IO`print("Large ");
									
									IO`print("basket created for user ");
									IO`print(user.name);
									IO`print(" on delegation ");
									IO`println(self.name);							
									IO`println("Basket contents: ");
									IO`println(bsk);
									IO`println("");
									
									return
								);
							);
						);
					);
				);
			)
			pre minWeight > 0 and maxWeight > 0 and variety > 0;
			
	public restock : () ==> ()
	restock() ==(
			for all producer in set producers do(
				producer.restockProducts();
				);
		);
	
	public pure getMaxWeight : () ==> real
	getMaxWeight()==
		getProducerslWeight(producers);
		
	public pure getUsersWeight : () ==> real
	getUsersWeight()==
		getrequiredWeight(users);
		
	public pure productsPerBasket: nat ==> nat
		productsPerBasket(basketNum)==(
			if (basketNum = 0)
			then return 8
			else checkVariety(getProducts(), basketNum, 0, 0);
		);
		
	public checkPendingUsers: () ==> ()
		checkPendingUsers()==(
			for all user in set pendingUsers do (
				registerUser(user, user.basketSize);
			);
		);

functions		
	public getProducerslWeight : ProducerSet -> real
	getProducerslWeight(producers)==(
	  if producers = {} then 0
		else let p in set producers in p.getWeight() + getProducerslWeight(producers\{p} ) 
		);
			    	            	
	public getrequiredWeight : UserSet -> real
	getrequiredWeight(users)==(
	  if users = {} then 0.0
		else let u in set users in 
		if u.basketSize = <small> then 4.0 + getrequiredWeight(users\{u})
		else 8 + getrequiredWeight(users\{u})
		);
		
	public checkVariety : ProductSet*nat*nat*nat -> nat
		checkVariety(products, basketNum, variety, rest)==(
		  if products = {|->} then variety + floor (rest/basketNum)  
			else let p in set dom products in 
			if products(p) / 0.5 >= basketNum then checkVariety({p} <-: products, basketNum, variety + 1, rest)
			else checkVariety({p} <-: products, basketNum, variety, rest + floor(products(p) / 0.5)) 
			)
			pre basketNum > 0;
		
traces
-- TODO Define Combinatorial Test Traces here
end Delegation