class User

types
	public Username = seq1 of char;
	
values
-- TODO Define values here

instance variables
	public name: Username;
	public delegation: [Delegation] := nil;
	public basketSize: Basket`Size; 
	public receivedBaskets: nat := 0;
	public cancelBasket: bool := false;
	public paidValue: real := 0;
	
operations

	--Constructor of class User
	--@params nm -> name of user
	public User : Username ==> User
		User(nm)==(
			name := nm;
			return self;
		)
		pre len nm <= 15					-- username nao pode ter mais que 15 caracteres
		post name = nm;
		
	--Operation responsible for changing the username
	--@params us -> name of user		
	public setUsername : Username ==> ()
		setUsername(us)==(
			name := us;
		)
		pre len us <= 15
		post name = us;
	
	--Operation responsible for setting a delegation to the user
	--@params del -> delegation object user is joining			
	public setDelegation : Delegation ==> ()
		setDelegation(del)==(
			delegation := del;
		)
		post delegation = del;
		
		
	--Operation responsible for setting the size for the user's basket
	--@params bs -> Size of the basket small or large					
	public setBasketSize : Basket`Size ==> ()
		setBasketSize(bs)==(
			basketSize := bs;
		)
		pre bs = <small> or bs = <large>
		post basketSize = bs;
		
	--Operation updating the value user paid for the baskets
	--@params bs -> Size of the basket small or large			
	public setPayingValue : Basket`Size ==> ()
		setPayingValue(bs)==(
		receivedBaskets:= receivedBaskets + 1;
		if(bs = <small>) then paidValue := paidValue + 3.5
		else  paidValue := paidValue + 7
		)
		pre bs = <small> or bs = <large>;
		
	--Operation that allows for the user to switch delegations
	--@params d3 -> New delegation object				
	--@params bs -> Size of the basket small or large					
	public delegationChange : Delegation*Basket`Size ==> ()	
		delegationChange(de,bs) ==(
		delegation.removeUser(self);
		de.registerUser(self, bs);
	 )
	 pre delegation <> nil;

	--Operation that allows to remove a delegation from a user
	 public removeDelegation : () ==> ()
	 removeDelegation() ==(
	 	delegation := nil;
	 )
	 pre delegation <> nil
	 post delegation = nil;
	
	--Operation that updates the cancel basket option for the user	 
	 public setCancelBasket : bool ==> ()
	 setCancelBasket(val)==(
	 	cancelBasket := val;
	 )
	 post cancelBasket = val;

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User