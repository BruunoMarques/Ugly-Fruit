class Basket
types
	public Size = <small> | <large>;
	public Weight = real;
	public ProductSet = map Product to Weight;

values
-- TODO Define values here
instance variables
	public size: Size;
	public weight : Weight := 0;
	public products: ProductSet := { |-> };
	public user: [User] := nil;
	
operations

	public Basket : Size ==> Basket
		Basket(sz)==(
			size := sz;
			return self;
		)
		post size = sz;
		
	public addProduct : Product*real ==> ()
		addProduct(product, w)==(
			dcl pds : ProductSet := products;
			
			if(product not in set dom products)
			then pds := pds munion {product |-> w}
			else pds(product) := pds(product) + w;
		
			if (size = <small>)
			then (
				if (getWeight(pds) <= 4)
				then (
					if(product in set dom products)
					then products(product) := products(product) + w
					else products := pds;
				);
			) elseif (size = <large>)
			then (
				if (getWeight(pds) <= 8)
				then(
					if(product in set dom products)
					then products(product) := products(product) + w
					else products := pds;
				);
			);
			
			setWeight(getWeight(products));
		)
		post products <> { |-> };
		
		public setWeight : real ==> ()
		setWeight(w) == (
			weight := w;
			)
			post weight = w;

		public getWeight : ProductSet ==> real
			getWeight(pds)==(
				dcl tmp : real := 0;
				
				for all p in set dom pds do (
					tmp := tmp + pds(p);
				);
				
				return tmp;
			)
			pre pds <> { |-> };
			
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Basket