class Producer
types
	public ProducerName = seq1 of char;
	public Weight = nat1;
	public ProductSet = map Product to Weight;

values
-- TODO Define values here
instance variables
	private name: ProducerName;
	private products: ProductSet := { |-> };
	
operations
	public Producer : ProducerName ==> Producer
	Producer(nm)==(
		name := nm;
		return self;
	)
	post name = nm;
	
	public addProduct : Product*nat1 ==> ()
	addProduct(product, weight)==(
		if product in set dom products
		then products(product) := products(product) + weight
		else products := products munion { product |-> weight }
	)
	post product in set dom products;
	
	public pure getWeight : () ==> nat
	getWeight()==
		sumWeight(products);

functions		
	public sumWeight : ProductSet -> nat
	sumWeight(products)==(
	  if products = {|->} then 0
		else let p in set dom products in products(p) + sumWeight({p} <-: products) 
		)
			
traces
-- TODO Define Combinatorial Test Traces here
end Producer