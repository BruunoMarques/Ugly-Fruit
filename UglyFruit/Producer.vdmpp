class Producer
types
	public ProducerName = seq1 of char;
	public Weight = real;
	public ProductSet = map Product to Weight;


values
-- TODO Define values here
instance variables
	public name: ProducerName;
	public products: ProductSet := { |-> };
	public delegation:[Delegation] := nil;
		
operations
	public Producer : ProducerName ==> Producer
	Producer(nm)==(
		name := nm;
		return self;
	)
	post name = nm;
	
	
		public setDelegation : Delegation ==> ()
		setDelegation(del)==(
			delegation := del;
		)
		post delegation = del;
	
	 public removeDelegation() == (
	 	delegation := nil;
	 )
	 pre delegation <> nil
	 post delegation = nil;
	
	public addProduct : Product*real ==> ()
	addProduct(product, weight)==(
		if product in set dom products
		then products(product) := products(product) + weight
		else products := products munion { product |-> weight };
		
		if (delegation <> nil)
		then delegation.checkPendingUsers();
	)
	pre weight >= 0.5
	post product in set dom products;
	
	
	public removeStock : Product*real ==> real
	removeStock(product,weight)==(
		dcl ret : Weight := 0;
		if (product not in set dom products)
		then return ret
		else
			if ((products(product)-weight) < 0)
			then ((ret := products(product)); (products(product):=0); return ret)
			else ((products(product):= (products(product) - weight)); return weight)
	)
	pre weight > 0 and products <> { |-> };
	
	public pure getWeight : () ==> real
	getWeight()==
		sumWeight(products);

functions		
	public sumWeight : ProductSet -> real
	sumWeight(products)==(
	  if products = { |-> } then 0
		else let p in set dom products in products(p) + sumWeight({p} <-: products) 
	);
			
traces
-- TODO Define Combinatorial Test Traces here
end Producer