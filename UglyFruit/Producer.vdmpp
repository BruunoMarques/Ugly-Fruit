class Producer
types
	public ProducerName = seq1 of char;
	public Weight = real;
	public ProductSet = map Product to Weight;


values
-- TODO Define values here
instance variables
	public name: ProducerName;
	public products: ProductSet := { |-> };
	public initialValues : ProductSet := { |-> };
	public delegation:[Delegation] := nil;
		
operations

	--Constructor of class Producer
	--@params nm -> name of producer
	public Producer : ProducerName*ProductSet ==> Producer
	Producer(nm,p)==(
		name := nm;
		products := p;
		initialValues := p;
		return self;
	)
	post name = nm;
	
	--Operation responsible for setting a delegation to the producer
	--@params del -> delegation object producer is joining	
		public setDelegation : Delegation ==> ()
		setDelegation(del)==(
			delegation := del;
		)
		post delegation = del;
	
	--Operation that allows to remove a delegation from a producer	
	 public removeDelegation: () ==> ()
	 removeDelegation() ==(
	 	delegation := nil;
	 )
	 pre delegation <> nil
	 post delegation = nil;
	
	--Operation responsible for adding a product to a producer's stock		
	--@params product -> product to add to producer stock 
	--@params weight -> weight of product in Kg to add to stock 		
	public addProduct : Product*real ==> ()
	addProduct(product, weight)==(
		if product in set dom products
		then (
			products(product) := products(product) + weight;
			initialValues(product) := initialValues(product) + weight)
		else (
			products := products munion { product |-> weight }; 
			initialValues := initialValues munion { product |-> weight }
		);
		
		if (delegation <> nil)
		then delegation.checkPendingUsers();
	)
	pre weight >= 0.5
	post product in set dom products;
	
	--Operation responsible for removing a product from producer's stock		
	--@params product -> product to remove from producer's stock 
	--@params weight -> weight of product in Kg to remove
	public removeStock : Product*real ==> real
	removeStock(product,weight)==(
		dcl ret : Weight := 0;
		if (product not in set dom products)
		then return ret
		else
			if ((products(product)-weight) < 0)
			then ((ret := products(product)); (products(product):=0); return ret)
			else ((products(product):= (products(product) - weight)); return weight)
	)
	pre weight > 0 and products <> { |-> };

	--Operation responsible for restocking the products on a producer's stock after the baskets were create (week passed)		
	public restockProducts : () ==> ()
		restockProducts()==(
			products := initialValues;
		);

	--Operation responsible for getting the weight of the producer's stock
	public pure getWeight : () ==> real
	getWeight()==
		sumWeight(products);
		

functions		
	--Function responsible for adding the weight of the producer's stock
	--@params products -> set of products whose weight should be calculated 
	--@return real -> weight of product set in Kg			
	public sumWeight : ProductSet -> real
	sumWeight(products)==(
	  if products = { |-> } then 0
		else let p in set dom products in products(p) + sumWeight({p} <-: products) 
	);
			
traces
-- TODO Define Combinatorial Test Traces here
end Producer