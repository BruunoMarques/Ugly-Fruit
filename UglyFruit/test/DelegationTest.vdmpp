class DelegationTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	 u1 : User := new User("Claudia");
	 u2 : User := new User("Margarida");
	 u3 : User := new User("Bruno");	 
	 u4 : User := new User("Rita");	 	 		 
   d1 : Delegation := new Delegation("Delegation1", "Porto", 2);
   d2 : Delegation := new Delegation("Delegation2", "Lisboa", 20); 
   productsSet : Producer`ProductSet := {
      new Product("Morango") |-> 10.0,
			new Product("Batata doce") |-> 10.0,
			new Product("Tomate") |-> 15.0,
			new Product("Pepino")|-> 20,
 			new Product("Couve")|-> 20,
			new Product("Rabanete")|-> 20,
			new Product("Ameixa")|-> 20,
			new Product("Ananas")|-> 20};			
	 p1 : Producer := new Producer("Diana",productsSet);
	 p2 : Producer := new Producer("Manuel",productsSet);	
	 p3 : Producer := new Producer("Carlos",{new Product("Kiwi")|-> 40});	 
	 p4 : Producer := new Producer("Ricardo",productsSet);	 	
   basketSizeSmall: Basket`Size := <small>;
   basketSizeLarge: Basket`Size := <large>;   
   
operations

private delegationTest : () ==> ()
		delegationTest() == (
		
		--test Contructor
		UtilsTest`assertTrue(d1.name = "Delegation1");
		UtilsTest`assertTrue(d1.location = "Porto");
		UtilsTest`assertTrue(d1.userCapacity = 2);		


		--test registerProducer		
		d1.registerProducer(p1);
		UtilsTest`assertTrue(p1 in set d1.producers);		

		--test registerUser	
		d1.registerUser(u1,basketSizeSmall);
		UtilsTest`assertTrue(u1 in set d1.users);		
		d1.registerUser(u2,basketSizeSmall);
		d1.registerUser(u3,basketSizeSmall);		
		UtilsTest`assertTrue(u3 in set d1.pendingUsers);
		d1.removeUser(u2);		
		d1.registerUser(u3,basketSizeSmall);	
		UtilsTest`assertTrue(d1.pendingUsers = {});		
		
		--test registerUser	
		d1.removeUser(u1);		
		UtilsTest`assertTrue(u1 not in set d1.users);
		
		--test getProducts		
		UtilsTest`assertTrue(d1.getProducts() = productsSet);		
		d1.registerProducer(p2);
		UtilsTest`assertTrue(d1.getProducts() <> productsSet);
		
		--test createBaskets		
		d1.registerUser(u1,basketSizeLarge);
		d1.createBaskets();
		UtilsTest`assertTrue(d1.userBaskets <> { |-> });	
		u1.setCancelBasket(true);
		d1.createBaskets();		
		UtilsTest`assertTrue(d1.userBaskets <> { |-> });			
		d2.registerProducer(p3);
		d2.registerProducer(p4);		
		d2.registerUser(u4,basketSizeLarge);
		d2.createBaskets();			
		UtilsTest`assertTrue(d2.userBaskets <> { |-> });			
		
	-- test productsPerBasket;
		UtilsTest`assertTrue(d1.productsPerBasket(0) = 8);		
		UtilsTest`assertTrue(d1.productsPerBasket(card d1.users) <> 0);		
		
	-- test checkVariety;
		UtilsTest`assertTrue(d1.checkVariety(productsSet, card d1.users, 0, 0) = 8);	
		UtilsTest`assertTrue(d1.checkVariety({new Product("Kiwi")|-> 0.5}, card d1.users, 0, 0) = 0);		
);	

public static main: () ==> ()
		main() == (
			new DelegationTest().delegationTest();
);

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end DelegationTest